// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/flow/pipeline.proto

package flow

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Source 数据存储源
type Source struct {
	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Type     string `protobuf:"bytes,2,opt,name=type,proto3" json:"type" gorm:"type:varchar(20);not null;comment:es、mysql、zinc"`
	Host     string `protobuf:"bytes,3,opt,name=host,proto3" json:"host" gorm:"type:varchar(100);not null;comment:主机ip"`
	Port     int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port" gorm:"comment:端口"`
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username" gorm:"type:varchar(50);comment:数据库用户名"`
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password" gorm:"type:varchar(50);not null;comment:数据库密码"`
	DbName   string `protobuf:"bytes,7,opt,name=db_name,json=dbName,proto3" json:"db_name" gorm:"type:varchar(100);comment:数据库"`
	Remark   string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark" gorm:"type:text;comment:备注"`
}

func (m *Source) Reset()         { *m = Source{} }
func (m *Source) String() string { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()    {}
func (*Source) Descriptor() ([]byte, []int) {
	return fileDescriptor_00d7fedb7555fa10, []int{0}
}
func (m *Source) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Source) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Source.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Source) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Source.Merge(m, src)
}
func (m *Source) XXX_Size() int {
	return m.Size()
}
func (m *Source) XXX_DiscardUnknown() {
	xxx_messageInfo_Source.DiscardUnknown(m)
}

var xxx_messageInfo_Source proto.InternalMessageInfo

func (m *Source) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Source) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Source) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Source) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Source) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Source) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Source) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *Source) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

// Sink 数据存储
type Sink struct {
	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	SinkId    string `protobuf:"bytes,2,opt,name=sink_id,json=sinkId,proto3" json:"sink_id" gorm:"type:varchar(32);unique;not null;comment:sink_id"`
	SinkType  string `protobuf:"bytes,3,opt,name=sink_type,json=sinkType,proto3" json:"sink_type" gorm:"type:varchar(50);not null;comment:sink_type：item、list、log、scrapy等"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name" gorm:"type:varchar(50);not null;comment:sink名称"`
	SourceId  int32  `protobuf:"varint,5,opt,name=source_id,json=sourceId,proto3" json:"source_id" gorm:"type:varchar(100);comment:外键ID"`
	TableName string `protobuf:"bytes,6,opt,name=table_name,json=tableName,proto3" json:"db_table" gorm:"type:varchar(100);comment:数据表"`
	Remark    string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark" gorm:"type:text;comment:备注"`
	// 必须指定一个source源
	Source *Source `protobuf:"bytes,8,opt,name=source,proto3" json:"sink_source" gorm:"foreignKey:source_id"`
}

func (m *Sink) Reset()         { *m = Sink{} }
func (m *Sink) String() string { return proto.CompactTextString(m) }
func (*Sink) ProtoMessage()    {}
func (*Sink) Descriptor() ([]byte, []int) {
	return fileDescriptor_00d7fedb7555fa10, []int{1}
}
func (m *Sink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sink.Merge(m, src)
}
func (m *Sink) XXX_Size() int {
	return m.Size()
}
func (m *Sink) XXX_DiscardUnknown() {
	xxx_messageInfo_Sink.DiscardUnknown(m)
}

var xxx_messageInfo_Sink proto.InternalMessageInfo

func (m *Sink) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Sink) GetSinkId() string {
	if m != nil {
		return m.SinkId
	}
	return ""
}

func (m *Sink) GetSinkType() string {
	if m != nil {
		return m.SinkType
	}
	return ""
}

func (m *Sink) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sink) GetSourceId() int32 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *Sink) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *Sink) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *Sink) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func init() {
	proto.RegisterType((*Source)(nil), "api.v1.flow.Source")
	proto.RegisterType((*Sink)(nil), "api.v1.flow.Sink")
}

func init() { proto.RegisterFile("v1/flow/pipeline.proto", fileDescriptor_00d7fedb7555fa10) }

var fileDescriptor_00d7fedb7555fa10 = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcf, 0x6b, 0x13, 0x5b,
	0x14, 0xee, 0xe4, 0x4d, 0x26, 0xc9, 0xed, 0x5b, 0xcd, 0xe3, 0x95, 0xe1, 0x3d, 0xc8, 0xed, 0x9b,
	0x55, 0x53, 0x78, 0x69, 0x9b, 0x52, 0xde, 0x33, 0x01, 0x85, 0xa0, 0x62, 0x11, 0x5c, 0xdc, 0x0a,
	0x62, 0x05, 0xc3, 0x24, 0x73, 0x9b, 0x5e, 0x9a, 0xcc, 0x4c, 0x67, 0x26, 0xad, 0x71, 0x95, 0x6c,
	0xfc, 0xb1, 0x28, 0x16, 0xac, 0x2e, 0xc4, 0x85, 0x62, 0xc1, 0x82, 0xd8, 0x16, 0x5c, 0x28, 0xd5,
	0x3f, 0xc0, 0x65, 0x97, 0xae, 0x2e, 0xda, 0x98, 0xa4, 0x66, 0x23, 0xcc, 0xca, 0xa5, 0xdc, 0x3b,
	0xc9, 0x58, 0x6c, 0x83, 0x15, 0x37, 0x37, 0xb9, 0xdf, 0xbd, 0xdf, 0x77, 0xce, 0x3d, 0xe7, 0x9b,
	0x03, 0x86, 0x96, 0x26, 0xc6, 0xe6, 0x4a, 0xe6, 0xf2, 0x98, 0x45, 0x2c, 0x5c, 0x22, 0x06, 0x4e,
	0x5a, 0xb6, 0xe9, 0x9a, 0xf2, 0xa0, 0x66, 0x91, 0xe4, 0xd2, 0x44, 0x92, 0x9d, 0xfd, 0xa5, 0x70,
	0x2c, 0x5f, 0x99, 0x1b, 0x2b, 0x9a, 0x45, 0x93, 0x2f, 0xfe, 0x35, 0x75, 0x5f, 0x04, 0xd2, 0x8c,
	0x59, 0xb1, 0x0b, 0x58, 0x1e, 0x02, 0x21, 0xa2, 0x2b, 0xc2, 0xb0, 0x30, 0x12, 0xce, 0x4a, 0x1d,
	0x0a, 0x43, 0x44, 0x47, 0x21, 0xa2, 0xcb, 0xb3, 0x40, 0x74, 0xab, 0x16, 0x56, 0x42, 0xc3, 0xc2,
	0x48, 0x2c, 0x7b, 0xb6, 0x43, 0x21, 0xdf, 0x7b, 0x14, 0xa6, 0x8b, 0xa6, 0x5d, 0x4e, 0xab, 0x6c,
	0x97, 0x5e, 0xd2, 0xec, 0xc2, 0xbc, 0x66, 0x8f, 0xa4, 0xc6, 0x13, 0x19, 0xc3, 0x74, 0x87, 0x8d,
	0x4a, 0xa9, 0x94, 0x29, 0x98, 0xe5, 0x32, 0x36, 0xdc, 0x34, 0x76, 0x1a, 0xb5, 0x7a, 0xb9, 0xea,
	0x2c, 0x96, 0x1a, 0xb5, 0xfa, 0x75, 0x62, 0x14, 0x54, 0xc4, 0x35, 0x64, 0x04, 0xc4, 0x79, 0xd3,
	0x71, 0x95, 0xdf, 0xb8, 0xf6, 0x49, 0xa6, 0xcd, 0xf6, 0x1e, 0x85, 0xa9, 0x23, 0xb4, 0x27, 0xc6,
	0x8f, 0x12, 0xff, 0xf8, 0xea, 0x75, 0xeb, 0xe1, 0x0e, 0xb1, 0x54, 0xc4, 0xb9, 0xf2, 0x14, 0x10,
	0x2d, 0xd3, 0x76, 0x15, 0x91, 0xbf, 0xe4, 0x1f, 0xa6, 0xc9, 0xf6, 0x1e, 0x85, 0x7f, 0xfa, 0x9a,
	0x3d, 0x62, 0xfb, 0xd9, 0x56, 0xf3, 0xce, 0x13, 0x15, 0xf1, 0x63, 0xf9, 0x2a, 0x88, 0x56, 0x1c,
	0x6c, 0x1b, 0x5a, 0x19, 0x2b, 0x61, 0x9e, 0x4e, 0xb6, 0x43, 0x61, 0x80, 0xf5, 0x49, 0x69, 0x6a,
	0x3c, 0x11, 0x24, 0xd2, 0xba, 0xb7, 0xdd, 0x5a, 0xd9, 0x6c, 0xee, 0xdc, 0x6d, 0xaf, 0x6d, 0xb4,
	0x6e, 0xbd, 0x6c, 0xae, 0xae, 0xa8, 0x28, 0xe0, 0xcb, 0x3a, 0x88, 0x5a, 0x9a, 0xe3, 0x2c, 0x9b,
	0xb6, 0xae, 0x48, 0x5c, 0xff, 0x1c, 0xd3, 0xef, 0x61, 0x1e, 0x85, 0xff, 0xf7, 0xd1, 0x3f, 0xf4,
	0xe2, 0x20, 0x50, 0x73, 0xeb, 0x46, 0xfb, 0x51, 0x5d, 0x45, 0x81, 0x8a, 0x8c, 0x40, 0x44, 0xcf,
	0xe7, 0xf8, 0x23, 0x22, 0x3c, 0xc8, 0x89, 0x0e, 0x85, 0x3d, 0xc8, 0xa3, 0x70, 0xb4, 0x5f, 0x59,
	0x0f, 0x69, 0xab, 0x48, 0xd2, 0xf3, 0x17, 0x58, 0xe6, 0x67, 0x80, 0x64, 0xe3, 0xb2, 0x66, 0x2f,
	0x28, 0x51, 0x2e, 0xf9, 0x6f, 0x87, 0xc2, 0x2e, 0xe2, 0x51, 0x08, 0x0f, 0x28, 0xba, 0xf8, 0x9a,
	0x1b, 0x28, 0x35, 0xd7, 0x6f, 0xb6, 0x5e, 0x6c, 0xa8, 0xa8, 0x7b, 0x55, 0xdd, 0x0a, 0x03, 0x71,
	0x86, 0x18, 0x0b, 0x7d, 0x8d, 0x96, 0x03, 0x11, 0x87, 0x18, 0x0b, 0x39, 0xa2, 0x1f, 0xf0, 0x5a,
	0x0f, 0xf2, 0x28, 0xfc, 0xef, 0x88, 0xdc, 0x27, 0x53, 0x89, 0x4c, 0xc5, 0x20, 0x8b, 0x15, 0x7c,
	0xb8, 0x4c, 0x5d, 0xa6, 0x8a, 0x24, 0xf6, 0x6f, 0x5a, 0x97, 0x6b, 0x02, 0x88, 0x71, 0x90, 0xfb,
	0xd9, 0xf7, 0x5c, 0xa1, 0x43, 0xe1, 0x37, 0xd0, 0xa3, 0x10, 0x1d, 0xb7, 0x0b, 0x01, 0xe9, 0xf3,
	0x9b, 0x07, 0xc4, 0xc5, 0xe5, 0x46, 0xad, 0x5e, 0x22, 0x8e, 0xcb, 0x7e, 0xcc, 0x62, 0xa3, 0x56,
	0x77, 0x0a, 0xb6, 0x66, 0x55, 0xdb, 0xcf, 0x6f, 0xab, 0x28, 0xca, 0xee, 0x5e, 0x64, 0x86, 0x9f,
	0x01, 0x22, 0x6f, 0x8e, 0xc8, 0x83, 0x9f, 0x62, 0xe6, 0xec, 0x76, 0x66, 0xf2, 0x67, 0xe2, 0x36,
	0x57, 0x57, 0xda, 0x4f, 0xb7, 0x55, 0xc4, 0xc9, 0xf2, 0x25, 0x10, 0x73, 0xf8, 0x37, 0xcc, 0x4a,
	0x17, 0xe6, 0x75, 0x4d, 0xf3, 0x67, 0xf5, 0x40, 0x8f, 0xc2, 0xc4, 0x8f, 0x1a, 0xdf, 0x5c, 0xbf,
	0xff, 0x69, 0x6d, 0x73, 0xfa, 0x34, 0xcb, 0x96, 0xf3, 0xa6, 0x75, 0xf9, 0x32, 0x00, 0xae, 0x96,
	0x2f, 0x61, 0xdf, 0x50, 0xbe, 0x6b, 0x99, 0x72, 0x54, 0xcf, 0xe7, 0xf8, 0xc1, 0xf1, 0x1d, 0xb5,
	0xff, 0x78, 0x43, 0x45, 0x31, 0x4e, 0xfa, 0xce, 0x54, 0x91, 0x5f, 0x30, 0x95, 0x7c, 0x05, 0x48,
	0x7e, 0xb6, 0xdc, 0x9b, 0x83, 0xa9, 0x3f, 0x92, 0x07, 0xe6, 0x5e, 0xd2, 0x9f, 0x6c, 0xd9, 0x64,
	0x87, 0xc2, 0x41, 0xde, 0x2e, 0xff, 0xae, 0x47, 0xe1, 0xdf, 0x7e, 0x80, 0x39, 0xd3, 0xc6, 0xa4,
	0x68, 0x9c, 0xc7, 0xd5, 0x74, 0x50, 0x2c, 0xe6, 0x17, 0x9f, 0x37, 0xfa, 0xe5, 0x43, 0x5c, 0x78,
	0xbb, 0x17, 0x17, 0x76, 0xf7, 0xe2, 0xc2, 0xfb, 0xbd, 0xb8, 0xb0, 0xda, 0x88, 0x0f, 0xec, 0x36,
	0xe2, 0x03, 0xef, 0x1a, 0xf1, 0x81, 0xd9, 0xdf, 0xbb, 0x93, 0x37, 0xc3, 0x96, 0xbc, 0xc4, 0xe7,
	0xe9, 0xe4, 0xd7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x33, 0xfe, 0xb2, 0x90, 0x05, 0x00, 0x00,
}

func (m *Source) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Source) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Source) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DbName) > 0 {
		i -= len(m.DbName)
		copy(dAtA[i:], m.DbName)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.DbName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Port != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Sink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPipeline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x32
	}
	if m.SourceId != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.SourceId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SinkType) > 0 {
		i -= len(m.SinkType)
		copy(dAtA[i:], m.SinkType)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.SinkType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SinkId) > 0 {
		i -= len(m.SinkId)
		copy(dAtA[i:], m.SinkId)
		i = encodeVarintPipeline(dAtA, i, uint64(len(m.SinkId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPipeline(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPipeline(dAtA []byte, offset int, v uint64) int {
	offset -= sovPipeline(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedSource(r randyPipeline, easy bool) *Source {
	this := &Source{}
	this.Id = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Type = string(randStringPipeline(r))
	this.Host = string(randStringPipeline(r))
	this.Port = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Port *= -1
	}
	this.Username = string(randStringPipeline(r))
	this.Password = string(randStringPipeline(r))
	this.DbName = string(randStringPipeline(r))
	this.Remark = string(randStringPipeline(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSink(r randyPipeline, easy bool) *Sink {
	this := &Sink{}
	this.Id = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.SinkId = string(randStringPipeline(r))
	this.SinkType = string(randStringPipeline(r))
	this.Name = string(randStringPipeline(r))
	this.SourceId = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.SourceId *= -1
	}
	this.TableName = string(randStringPipeline(r))
	this.Remark = string(randStringPipeline(r))
	if r.Intn(5) != 0 {
		this.Source = NewPopulatedSource(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyPipeline interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePipeline(r randyPipeline) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPipeline(r randyPipeline) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RunePipeline(r)
	}
	return string(tmps)
}
func randUnrecognizedPipeline(r randyPipeline, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldPipeline(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldPipeline(dAtA []byte, r randyPipeline, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulatePipeline(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulatePipeline(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulatePipeline(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulatePipeline(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulatePipeline(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulatePipeline(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulatePipeline(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Source) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPipeline(uint64(m.Id))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovPipeline(uint64(m.Port))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	return n
}

func (m *Sink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPipeline(uint64(m.Id))
	}
	l = len(m.SinkId)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	l = len(m.SinkType)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	if m.SourceId != 0 {
		n += 1 + sovPipeline(uint64(m.SourceId))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovPipeline(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovPipeline(uint64(l))
	}
	return n
}

func sovPipeline(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPipeline(x uint64) (n int) {
	return sovPipeline(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Source) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Source: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Source: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SinkId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SinkId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SinkType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SinkType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceId", wireType)
			}
			m.SourceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPipeline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPipeline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &Source{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPipeline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPipeline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPipeline(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPipeline
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPipeline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPipeline
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPipeline
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPipeline
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPipeline        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPipeline          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPipeline = fmt.Errorf("proto: unexpected end of group")
)
