// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.5
// source: v1/sink/sink.proto

package sink

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataHub_DoSink_FullMethodName = "/api.v1.sink.DataHub/DoSink"
	DataHub_DoItem_FullMethodName = "/api.v1.sink.DataHub/DoItem"
)

// DataHubClient is the client API for DataHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// pipeline逻辑
type DataHubClient interface {
	// 接收任意数据类型
	DoSink(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DoSinkRequest, Response], error)
	// 接收定义好的 protobuf item 数据
	DoItem(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DoItemRequest, Response], error)
}

type dataHubClient struct {
	cc grpc.ClientConnInterface
}

func NewDataHubClient(cc grpc.ClientConnInterface) DataHubClient {
	return &dataHubClient{cc}
}

func (c *dataHubClient) DoSink(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DoSinkRequest, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataHub_ServiceDesc.Streams[0], DataHub_DoSink_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DoSinkRequest, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataHub_DoSinkClient = grpc.ClientStreamingClient[DoSinkRequest, Response]

func (c *dataHubClient) DoItem(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[DoItemRequest, Response], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataHub_ServiceDesc.Streams[1], DataHub_DoItem_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DoItemRequest, Response]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataHub_DoItemClient = grpc.ClientStreamingClient[DoItemRequest, Response]

// DataHubServer is the server API for DataHub service.
// All implementations must embed UnimplementedDataHubServer
// for forward compatibility.
//
// pipeline逻辑
type DataHubServer interface {
	// 接收任意数据类型
	DoSink(grpc.ClientStreamingServer[DoSinkRequest, Response]) error
	// 接收定义好的 protobuf item 数据
	DoItem(grpc.ClientStreamingServer[DoItemRequest, Response]) error
	mustEmbedUnimplementedDataHubServer()
}

// UnimplementedDataHubServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataHubServer struct{}

func (UnimplementedDataHubServer) DoSink(grpc.ClientStreamingServer[DoSinkRequest, Response]) error {
	return status.Errorf(codes.Unimplemented, "method DoSink not implemented")
}
func (UnimplementedDataHubServer) DoItem(grpc.ClientStreamingServer[DoItemRequest, Response]) error {
	return status.Errorf(codes.Unimplemented, "method DoItem not implemented")
}
func (UnimplementedDataHubServer) mustEmbedUnimplementedDataHubServer() {}
func (UnimplementedDataHubServer) testEmbeddedByValue()                 {}

// UnsafeDataHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataHubServer will
// result in compilation errors.
type UnsafeDataHubServer interface {
	mustEmbedUnimplementedDataHubServer()
}

func RegisterDataHubServer(s grpc.ServiceRegistrar, srv DataHubServer) {
	// If the following call pancis, it indicates UnimplementedDataHubServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataHub_ServiceDesc, srv)
}

func _DataHub_DoSink_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataHubServer).DoSink(&grpc.GenericServerStream[DoSinkRequest, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataHub_DoSinkServer = grpc.ClientStreamingServer[DoSinkRequest, Response]

func _DataHub_DoItem_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataHubServer).DoItem(&grpc.GenericServerStream[DoItemRequest, Response]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataHub_DoItemServer = grpc.ClientStreamingServer[DoItemRequest, Response]

// DataHub_ServiceDesc is the grpc.ServiceDesc for DataHub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataHub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.sink.DataHub",
	HandlerType: (*DataHubServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DoSink",
			Handler:       _DataHub_DoSink_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DoItem",
			Handler:       _DataHub_DoItem_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "v1/sink/sink.proto",
}
